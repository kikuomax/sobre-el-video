AWSTemplateFormatVersion: '2010-09-09'
Description: 'Sobre el Video API definition'

Parameters:
  BaseStackName:
    Description: 'Base name of the stack set'
    Type: 'String'
    Default: 'sobre-el-video'
  MainTableArn:
    Description: 'ARN of the main table. May be omitted.'
    Type: 'String'
    Default: 'null'
  VideoBucketName:
    Description: 'Name of the S3 bucket for videos. May be omitted.'
    Type: 'String'
    Default: 'null'
  VideoBucketArn:
    Description: 'ARN of the S3 bucket for videos. May be omitted.'
    Type: 'String'
    Default: 'null'

Conditions:
  IsMainTableArnGiven: !Not [!Equals [!Ref MainTableArn, 'null']]
  IsVideoBucketNameGiven: !Not [!Equals [!Ref VideoBucketName, 'null']]
  IsVideoBucketArnGiven: !Not [!Equals [!Ref VideoBucketArn, 'null']]

Resources:
  VideoApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Ref AWS::StackName
      Description: 'REST API of Sobre el Video'
      BinaryMediaTypes:
        - 'application~1octet-stream'
        # TODO: specific video formats may be appended

  # Function which stores given video
  # - Function body
  StoreVideoFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: 'Stores a given video file and associates it with the user'
      Code: '.aws-sam/build/StoreVideoFunction'
      Handler: 'index.lambda_handler'
      Runtime: 'python3.7'
      Timeout: 60
      Environment:
        Variables:
          MAIN_TABLE_NAME:
            Fn::If:
              - IsMainTableArnGiven
              - !Ref MainTableArn
              - Fn::ImportValue: !Sub '${BaseStackName}-main-table-name'
          VIDEO_BUCKET_NAME:
            Fn::If:
              - IsVideoBucketNameGiven
              - !Ref VideoBucketName
              - Fn::ImportValue: !Sub '${BaseStackName}-video-bucket-name'
      Role: !GetAtt StoreVideoFunctionRole.Arn
  # - Role of the function itself
  StoreVideoFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'VideoBucketPut'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject'
                Resource:
                  !Join
                    - ''
                    - - Fn::If:
                          - IsVideoBucketArnGiven
                          - !Ref VideoBucketArn
                          - Fn::ImportValue: !Sub '${BaseStackName}-video-bucket-arn'
                      - '/*'
  # - Role of the function invoker
  StoreVideoFunctionInvokerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'StoreVideoFunctionInvoke'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt StoreVideoFunction.Arn

  # GET /
  RootGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: 'Welcome'
      RestApiId: !Ref VideoApi
      ResourceId: !GetAtt VideoApi.RootResourceId
      HttpMethod: 'GET'
      AuthorizationType: 'NONE'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            text/html: 'Empty'
      Integration:
        Type: 'MOCK'
        PassthroughBehavior: 'WHEN_NO_TEMPLATES'
        RequestTemplates:
          application/json: >
            { "statusCode": 200 }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              text/html: |
                <!DOCTYPE html>
                <html>
                  <head>
                    <meta charset="utf-8">
                    <title>Sobre el Video</title>
                  </head>
                  <body>
                    <h1>Welcome!</h1>
                  </body>
                </html>

  # /video
  VideoResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref VideoApi
      ParentId: !GetAtt VideoApi.RootResourceId
      PathPart: 'video'
 
  # /video/{user}
  VideoUserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref VideoApi
      ParentId: !Ref VideoResource
      PathPart: '{user}'
  # - OPTIONS (for CORS support)
  VideoUserOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: 'Preflight for /video/{user}'
      RestApiId: !Ref VideoApi
      ResourceId: !Ref VideoUserResource
      HttpMethod: 'OPTIONS'
      AuthorizationType: 'NONE'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: 'MOCK'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        RequestTemplates:
          application/json: >
            { "statusCode": 200 }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: '{}'
  # - POST
  VideoUserPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: "Stores user's video"
      RestApiId: !Ref VideoApi
      ResourceId: !Ref VideoUserResource
      HttpMethod: 'POST'
      AuthorizationType: 'NONE'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      Integration:
        Type: 'AWS'
        ContentHandling: 'CONVERT_TO_TEXT'
        PassthroughBehavior: 'WHEN_NO_MATCH'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreVideoFunction.Arn}/invocations'
        Credentials: !GetAtt StoreVideoFunctionInvokerRole.Arn
        RequestTemplates:
          application/octet-stream: |
            {
              "user": "$input.params('user')",
              "videoBase64": "$input.body",
              "type": "unknown"
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: "'*'"

Outputs:
  RestApiId:
    Description: 'ID of the REST API'
    Value: !Ref VideoApi
    Export:
      Name: !Sub '${AWS::StackName}-id'
